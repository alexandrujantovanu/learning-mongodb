We can think of the index as a simple list of values + pointers to the original document.

Get all indexes on a collection:
 db.collectionName.getIndexes()

Import persons.json collection(5000 docs)
mongoimport "Section 10. Working with Indexes"/"persons.json" -d contactData -c contacts --jsonArray

People older then 60:
db.contacts.find({"dob.age": {$gt: 60}}).pretty()

Amount of documents:
db.contacts.find({"dob.age": {$gt: 60}}).count() => 1222 documents


See the statistics like execution time and stages:
db.contacts.explain().find({"dob.age": {$gt: 60}})
db.contacts.explain("executionStats").find({"dob.age": {$gt: 60}})

Add index of field dob.age:
db.contacts.createIndex({"dob.age": 1})

Run below command and see how executionTimeMillis lowered, and that it did IXSCAN:
db.contacts.explain("executionStats").find({"dob.age": {$gt: 60}})

See that for grater than 20 it returns all docs because there is no younger ages
and that it takes longer than without index(5000 docs):
db.contacts.explain("executionStats").find({"dob.age": {$gt: 20}})

Drop created index:
db.contacts.dropIndex({"dob.age": 1})
Run code below, and see that it is way faster without index:
db.contacts.explain("executionStats").find({"dob.age": {$gt: 20}})

Create index for text value field:
db.contacts.createIndex({gender: 1})

db.contacts.explain("executionStats").find({gender: "male"})

Creating compound index:
db.contacts.createBox({"dob.age": 1, gender: 1})

Search using index works left to right for compund index:
db.contacts.explain("executionStats").find({"dob.age": 25})

Indexes also help with sorting:
db.contacts.explain().find({"dob.age": 35}).sort({gender: 1})

!Note: 
If we are not using indexes, and we do a sort on a large amount
of documents, we can actually timeout, because MongoDB has a threshold
of 32MB in memory for sorting. And if we have no index, MongoDB will 
essentially fetch all documents into memory and do the sort there.
And for large collections, a large amount of fetched data, this 
can be simply too much to then sort.
So sometimes, we need Index not only to speed up queries, but also 
to be able to sort at all(when we have millions od documents).

Create unique index:
db.contacts.createIndex({email: 1}, {unique: true})

Unique indexes ensure data consistency and help us 
to avoid duplicate data for fields for fields that
we need to have unique.

Create partial index:
db.contacts.createIndex({"dob.age": 1}, {partialFilterExpression: {gender: "male" }})
db.contacts.createIndex({"dob.age": 1}, {partialFilterExpression: {"dob.age": {$gt: 60}}})

db.contacts.explain().find({"dob.age": {$gt: 60}, gender: "male"})

Adding a partial index for the fields where email exists:
db.users.createIndex({email: 1}, {unique: true, partialFilterExpression: {email: {$exists: true}}})

Adding an index with expiry time.
Whenever we have a usecase when data should cleanup itself,
we don't need to write a complex script for that,
we can use a "Time-To-Live index" with expireAfterSeconds,
it works only on a single field, not on compound indexes:
db.sessions.createIndex({createdAt: 1}, {expireAfterSeconds: 10})

Covered queries:
db.customers.explain("executionStats").find({name: "Max"}, {_id: 0, name: 1})

Display all plans execution:
db.customers.explain("allPlansExecution").find({name: "Max", age: 30})

Inserting a value into contacts,
for example of indexing arrays (multi-key index)
db.contacts.insertOne({name: "Alex", hobbies: ["Cooking", "Sports"], addresses: [{street: "Main Street"}, {street: "Second Street"}]})

Create index on array:
db.contacts.createIndex({hobbies: 1})

Creation of compound index with 2/more multi-key indexes(arrays) doesn't work:
db.contacts.createIndex({addresses: 1, hobbies: 1}) // not working

<-----Text indexes----->
You may have only one text index per document!
Dropping text indexes is available only by name
db.products.dropIndex("indexName")
When adding $weights helps put the weight on the field \n
that holds the most important keywords
Some find parameters for text index:
$caseSensitive: true/false
$language: "languageName"

Inserting data:
db.products.insertMany([{title: "A book", description: "This is an awesome book about an young artist"}, {title: "Red T-shirt", description: "This T-shirt is red and is pretty awesome"}])  

Creating text index:
db.products.createIndex({description: "text"})

Search:
db.products.find({$text: {$search: "awesome"}}).pretty()
db.products.find({$text: {$search: "book"}}).pretty()

Search a phrase with \"here goes phrase\":
db.products.find({$text: {$search: "\"red book\""}}).pretty() //not present
db.products.find({$text: {$search: "\"awesome book\""}}).pretty() // present

Getting a score, mongodb asigned to the result:
db.products.find({$text: {$search: "awesome t-shirt"}}, {score: {$meta: "textScore"}}).pretty()

Sorting the result by score:
db.products.find({$text: {$search: "awesome t-shirt"}}, {score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}}).pretty()

Dropping text index:
db.products.dropIndex("description_text")

Create combined text index:
db.products.createIndex({title: "text", description: "text"})

Adding one more products:
db.products.insertOne({title: "A ship", description: "Floats perfectly"})

Search (this time we are able to search on both attributes):
db.products.find({$text: {$search: "book"}}).pretty()
db.products.find({$text: {$search: "ship"}}).pretty()

Search with excluded words using (-):
db.products.find({$text: {$search: "awesome -t-shirt"}}).pretty() 

Drop combined index by name:
db.products.dropIndex("title_text_description_text")

Create text indexes with configuration (default_language and weights):
db.products.createIndex({title: "text", description: "text"}, 
{default_language: "english", weights: {title: 1, descriptioon: 10}})

db.products.find({$text: {$search: "red"}}, {score: {$meta: "textScore"}}).pretty()

Open a new terminal:
run: mongo credit-rating.js
wait until db will be populated with 1 000 000 documents.

db.ratings.createIndex({age: 1})
db.ratings.explain("executionStats").find({age: {$gt: 80}})
db.ratings.dropIndex({age: 1})
db.ratings.explain("executionStats").find({age: {$gt: 80}})
